---
title: "Example Variants Report"
format: html
editor: source
---


```{r}
#| label: packages
#| include: false
library(knitr)
library(VariantAnnotation)
library(tidyverse)
setwd("/home/rstudio/dati_rstudio/reporting/")
source("/home/rstudio/dati_vscode/datasets_reference_only/annotations/extract_annotations.R")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

# Variant Calling

## Characteristics of the variants

We import a VCF file by using the library **VariantAnnotation*.
Inside this package, the function *readVcf* allows us to point to the VCF we want to import: we need to specify which genome version was used.

```{r}
#| label: read_vcf
vcf <- readVcf("/home/rstudio/dati_vscode/variant_calling/variants/results_ann.vcf", genome = "hg38")
```


Let's look at the structure: the VCF class has a few accessors which allow us to inspect different sections of the VCF file.

The *rowRanges* accessor allows us to see the coordinates and alleles:

```{r}
#| label: rowRanges
head(rowRanges(vcf))
```

The *info* accessor allows us to see the annotations:

```{r}
#| label: infoSection
head(info(vcf))
```

and the *geno* accessor allows us to access the genotypes of the samples represented in the VCF file

```{r}
#| label: genoSection
head(geno(vcf))
```


To simplify our analyses we can create a tibble, which we need in order to plot or create tables.
Using *lapply* and some functions provided by the teacher, we can unnest the annotations created by **snpEff** and simplify the structure of the data.


```{r}
#| label: simplifyVCF
variants <- as_tibble(rowRanges(vcf))
variants$variantName = names(rowRanges(vcf))
variants = cbind(variants, as_tibble(geno(vcf)$GT))
variants$DP = info(vcf)$DP
variants$QD = info(vcf)$QD
variants$MQ = info(vcf)$MQ
variants$gene <- unlist(lapply(info(vcf)$ANN, get_most_severe_gene))
variants$consequence <- unlist(lapply(info(vcf)$ANN, get_most_severe_consequence))
variants$impact <- unlist(lapply(info(vcf)$ANN, get_most_severe_impact))
```



Now that we have a tibble, we can use it to plot some quality data, like the *mapping quality* of the variants:

```{r}
#| label: mappingQuality
ggplot(variants, aes(x=MQ,y=..density..))+
  geom_density()
```


or the *depth* they have been sequenced at:

```{r}
#| label: depth
ggplot(variants, aes(x=DP,y=..density..))+
  geom_density()
```


## Variant consequences

Naturally, an interesting thing is looking at the variant consequences once we have annotated the variants.

A Pie Chart is in fact a Bar plot with polar coordinates: let's see how we can do it in R


```{r}
#| label: consequences
ggplot(variants, aes(x="", y=consequence, fill=consequence))+
  geom_bar(width = 1, stat = "identity")+
  coord_polar(theta = "y")+
  theme_void()
```

There is a better way to plot this, and we can improve the plot as follows

```{r}
#| label: piechart

variants %>%
  filter(!is.na(consequence)) %>%
  count(consequence) %>%
  mutate(count = n,
         percent = paste0(round(count/sum(count) * 100, digits = 2), "%"))%>%
  arrange(desc(count)) %>%
  mutate(lab.ypos = cumsum(count) - 0.5 * count) %>%
  ggplot(aes(x="", y=count, fill=consequence))+
  geom_bar(width = 1, stat = "identity")+
  coord_polar(theta = "y")+
  geom_text(aes(y=lab.ypos, label=percent))+
  theme_void()
```

But the labels are still awfully overlapping and they are not readable.
In different situations we can use **ggrepel** to avoid labels overlaps, like follows:


```{r}
#| label: piechartRepel
variants %>%
  filter(!is.na(consequence)) %>%
  count(consequence) %>%
  mutate(count = n,
         percent = paste0(round(count/sum(count) * 100, digits = 2), "%"))%>%
  arrange(desc(count)) %>%
  mutate(lab.ypos = cumsum(count) - 0.5 * count) %>%
  ggplot(aes(x="", y=count, fill=consequence))+
  geom_bar(width = 1, stat = "identity")+
  coord_polar(theta = "y")+
  ggrepel::geom_text_repel(aes(y=lab.ypos, label=percent), max.overlaps = Inf)+
  theme_void()
```


In this case it does not help us very much, due to the nature of the data.
Let's table the results instead:


```{r}
#| label: consequencetable
#| results: asis

variants %>%
  filter(!is.na(consequence)) %>%
  group_by(consequence) %>%
  summarise(count=n()) %>%
  arrange(desc(count)) %>%
  kable()
```


# Disease candidates

We can filter the VCF as we did on bash, but this time is going to be easier:


```{r}
#| label: filterVariants
selectedVars = variants %>%
  filter(
    impact == "HIGH",
    normal == "0/0"
  )
```


Let's use this to table the result in a simple table:

```{r}
#| label: selectedVarTable
#| results: asis
#| echo: false
selectedVars %>%
  select(seqnames, start, REF, ALT, gene, consequence) %>%
  kable()
```


Now, like we did in class, we want to use websites like *ClinVar* or *gnomAD* to add information to our table and present it: let's imagine we have checked on clinvar if the variant is pathogenic or not, and whether the gene is constrained for LoF variation on gnomad.

The information below does not correspond to a real search result:

```{r}
#| label: furtherAnnotations
selectedVars$clinvar = c("benign", "benign", "benign", "benign", "benign", "benign", 
                         "benign", "benign", "benign", "pathogenic", "pathogenic")
selectedVars$constrained = c("not constrained", "not constrained", "not constrained", 
                             "not constrained", "not constrained", "not constrained", 
                             "not constrained", "not constrained", "not constrained", 
                             "constrained", "constrained")
```


Now we can table this information and present it in our report.
We might want to select only some columns to improve the readability of the table:

```{r}
#| label: annotatedTable
#| results: asis
selectedVars %>%
  select(seqnames, start, gene, consequence, clinvar, constrained) %>%
  kable()
```


